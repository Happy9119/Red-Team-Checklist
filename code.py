# Generate a fillable checklist PDF (clickable checkboxes) for initial foothold testing
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.colors import black, HexColor
import re

# Output file path
file_path = "CheckList.pdf"

# Checklist data
checklist_data = {
    "OSINT & Recon": [
        "Google Dorking",
        "Login portal through Google Dorking",
        "Credential harvesting through Intelx",
        "Web.archieve",
        "Github Dorking",
        "Shodan Enumeration",
        "FOFA enumeration",
        "DNSdumpster",
        "Cencys",
        "hunter.how",
        "SecurityTrails",
        "RapidDNS.io",
        "CentralOps.net",
        "mxToolbox",
        "crt.sh",
        "whois",
        "IP details of web app",
        "Cloudflare bypass"
    ],
    "Scanning / Enumeration": [
        "Nuclei Scan",
        "Nikto Scan",
        "WpScan Scan",
        "Gobuster/FFUF Scan"
    ],
    "Vulnerability Validation": [
        "BurpSuite Pro Scan for File upload/SQLi"
    ],
    "Automation": [
        "Automation through subfinder+httpx+katana+dalfox+SQLMap"
    ]
}

# Helper: Slugify text for unique checkbox names
def slugify(text):
    text = text.lower()
    text = re.sub(r'[^a-z0-9]+', '_', text).strip('_')
    return text[:60]

# Page setup
PAGE_W, PAGE_H = A4
MARGIN_X = 50
MARGIN_Y = 50
LINE_H = 20
SECTION_SPACING = 14
CHECKBOX_SIZE = 14
LABEL_OFFSET_X = 22
EXTRA_SECTION_GAP = 10  # extra gap after a module

# Create PDF
c = canvas.Canvas(file_path, pagesize=A4)
c.setTitle("Red Team – Initial Foothold Checklist (Fillable)")

# Header
def draw_header():
    c.setFont("Helvetica-Bold", 16)
    c.setFillColor(black)
    c.drawString(MARGIN_X, PAGE_H - MARGIN_Y + 10, "Red Team – Initial Foothold Checklist (Fillable)")
    c.setFont("Helvetica", 9)
    c.setFillColor(HexColor("#333333"))
    c.drawString(MARGIN_X, PAGE_H - MARGIN_Y - 5, "Tick the boxes directly in this PDF to track progress.")
    c.setFillColor(black)

y = PAGE_H - MARGIN_Y - 30
draw_header()

form = c.acroForm
field_names = set()

# Helper: Check if new page is needed
def ensure_new_page(required_space):
    global y
    if y - required_space < MARGIN_Y:
        c.showPage()
        draw_header()
        y = PAGE_H - MARGIN_Y - 30

# Draw sections and checkboxes
for section, items in checklist_data.items():
    ensure_new_page(SECTION_SPACING + LINE_H + (len(items) * LINE_H) + EXTRA_SECTION_GAP)
    c.setFont("Helvetica-Bold", 12)
    c.drawString(MARGIN_X, y, section)
    y -= SECTION_SPACING

    c.setFont("Helvetica", 11)
    for item in items:
        ensure_new_page(LINE_H)
        base_name = f"{slugify(section)}_{slugify(item)}"
        name = base_name
        suffix = 1
        while name in field_names:
            name = f"{base_name}_{suffix}"
            suffix += 1
        field_names.add(name)

        cb_x = MARGIN_X
        cb_y = y - CHECKBOX_SIZE + 4
        form.checkbox(
            name=name,
            tooltip=item,
            x=cb_x, y=cb_y,
            size=CHECKBOX_SIZE,
            checked=False,
            buttonStyle='check',
            borderWidth=1,
            borderColor=black,
            fillColor=None,
            textColor=black
        )
        c.drawString(cb_x + LABEL_OFFSET_X, y, item)

        y -= LINE_H

    # Extra space after section
    y -= EXTRA_SECTION_GAP

# Footer
c.setFont("Helvetica", 8)
c.setFillColor(HexColor("#666666"))
c.drawRightString(PAGE_W - MARGIN_X, MARGIN_Y - 10, "Generated by Happy Singh")
c.setFillColor(black)

# Save file
c.save()
print(f"[+] Fillable checklist saved to {file_path}")
